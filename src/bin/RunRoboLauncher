#!/usr/bin/env python
import argparse, docker.types, requests.exceptions, shlex
from configparser import ConfigParser
from util import RoboContainerInterface

parser = argparse.ArgumentParser(description='Robo Infrastructure Launcher', fromfile_prefix_chars='@')
group_command_type = parser.add_mutually_exclusive_group(required=True)
group_experiment_type = parser.add_mutually_exclusive_group(required=True)
group_mutation_type = parser.add_mutually_exclusive_group(required=True)
group_chromo_encoding = parser.add_mutually_exclusive_group(required=True)

# Command to execute (start, stop etc)
group_command_type.add_argument('--start', action='store_true', help="Starts the infrastructure")
group_command_type.add_argument('--stop', action='store_true', help="Stops the infrastructure", default=False)

# Experiment Type
group_experiment_type.add_argument('--hunter-prey-selfish', action='store_true', help='Runs the hunter-prey experiment where the hunters are solely selfish hunters')
group_experiment_type.add_argument('--hunter-prey-reciprocator', action='store_true', help='Runs the hunter-prey experiment where the hunters are reciprocators')

# General Setup
parser.add_argument('--num_robots', action='store', required=True, help='Number of robots that should be used in this experiment', type=int)
parser.add_argument('--population_size', action='store', required=True, help='Number of individuals in each robots population', type=int)

# EA Parameters
parser.add_argument('--num_generations', action='store', required=True, help='The number of generations the evoluationary algorithm should run', type=int)
parser.add_argument('--mutation_rate', action='store', required=True, help='The rate at which the mutation method should be applied', type=float)
group_mutation_type.add_argument('--each_gene', action='store_true', help='Mutation rate is checked for each gene in the chromosome')
group_mutation_type.add_argument('--entire_chromosome', action='store_false', help='Mutation rate is checked for the entire chromosome')
group_chromo_encoding.add_argument('--float', action='store_true', help='The underlying encoding for each gene should be represented with a floating point encoding')
group_chromo_encoding.add_argument('--binary', action='store_true', help='The underlying encoding for each gene should be represented with a binary encoding')

# Neural Network Settings
# TODO -> make dependency flags for hidden layers and active bias
parser.add_argument('--num_neural_hidden_layers', action='store', required=True, help='The number of hidden layers', default=1, type=int)
parser.add_argument('--num_hidden_nodes', action='store', required=True, help="The number of nodes in each hidden layer", default=1, type=int)
parser.add_argument('--active_bias', action='store_true', help='Should there be an active bias node for the underlying Neural Network', default=True)
parser.add_argument('--bias_value', action='store', help='The value of the active bias node', default=1.0)

config = ConfigParser()
config.read('config.ini')
config_value = config.get('cli', 'options')

argument_list = shlex.split(config_value)
# Algorithm parameters
args = parser.parse_args(argument_list)


def start():
    ## Setup Docker network
    print("Setting up docker network")
    ipam_poll = docker.types.IPAMPool(subnet='172.18.0.0/16')
    ipam_config = docker.types.IPAMConfig(pool_configs=[ipam_poll])
    try:
        # if already exists, disconnect and recreate the network from fresh
        sim_network = client.networks.get("simulation-network")
        for container in sim_network.containers:
            sim_network.disconnect(container)
        sim_network.remove()
    except Exception as e:
        pass
    client.networks.create("simulation-network", driver="bridge", ipam=ipam_config)
    print("Launching Engine")
    # # Launch engine
    engine = RoboContainerInterface('https://github.com/rasmunk/robo_engine.git', 'master', 'robo_engine', 'simulation-network')
    engine.start()

    print("Launching Robots")
    list_robots = []
    # # Launch robots
    for idx in range(args.num_robots):
        list_robots.append(RoboContainerInterface(repo='https://github.com/rasmunk/emergent_controller.git', branch='development', name="robo_client", network='simulation-network'))
        list_robots[idx].start()

    print("Launching Simulator")
    # # Launch simulator
    sim = RoboContainerInterface(repo='https://github.com/rasmunk/robo_server.git', branch='development', name='robo_server', network='simulation-network')
    sim.start()
    print("Finished")


def stop():
    pass

if __name__ == "__main__":
    # Initialize Docker
    try:
        client = docker.from_env()
        client.ping()
    except requests.exceptions.ConnectionError as e:
        print("Failed to connect to Docker, are you sure docker is running")
        exit(-1)
